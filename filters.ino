// FIR Filter Implementation on Raspberry Pi Pico W
#define SAMPLE_RATE 20000  // Sampling frequency (Hz)
#define BUFFER_SIZE 151     // FIR filter order
#define ANOTHER_BUFFER 100 // Buffer for batch processing

// FIR filter coefficients generated from MATLAB
float h[BUFFER_SIZE] = {-0.000196945112376558,-0.000682486089235881,-0.000206346900794462,0.000477331727530773,0.000363452678217457,-7.71046135893093e-05,3.78815165511894e-18,8.77807128740348e-05,-0.00047006450103214,-0.000698411300393017,0.000339523332550858,0.00125338278922503,0.000400210872934013,-0.000969144744551763,-0.000765890237857165,0.000167279225445848,-8.16582520678207e-18,-0.000197606535592242,0.00106829710580943,0.00159472372627213,-0.000775787635222008,-0.00285651251019979,-0.000907370579602269,0.00218141517342954,0.00170879642230349,-0.000369518655350983,-1.22379458326227e-17,0.000426958683908851,-0.00228147202344769,-0.00336580385659093,0.00161820197105458,0.00588939614633983,0.00184954140434993,-0.00439739872202489,-0.0034078956645926,0.000729378141072267,-3.98483880330877e-18,-0.00082671595238501,0.00437870877585076,0.00640644543865718,-0.00305636350875138,-0.0110444107285135,-0.00344587700390213,0.0081445869071595,0.00627885323991601,-0.00133770900689741,3.18598747284536e-17,0.00150565968876661,-0.00795596231015279,-0.0116223412775383,0.00554097498859423,0.0200275570365026,0.00625630474599486,-0.0148211617270629,-0.0114654438074272,0.00245425118336613,-6.71924087125769e-18,-0.00280066307003986,0.0149383759019188,0.0220713918401476,-0.0106663063552571,-0.0391794384788365,-0.0124749842691314,0.0302280616103377,0.0240173263355719,-0.00530674046301725,7.54449980632308e-18,0.00658181194017162,-0.0370983962956633,-0.0586644853501478,0.0308695216177629,0.126503756101814,0.046604802103777,-0.13866694607201,-0.151304270090471,0.0607917787835487,0.199919300369095,0.060693704334202,-0.150816307685748,-0.137996305491281,0.0463042824266442,0.125483901038923,0.0305707597851109,-0.0580016702065063,-0.0366189546854794,0.00648601612146552,7.42233286463683e-18,-0.00521207198085562,0.0235491066493375,0.0295883946916528,-0.0121900644060081,-0.0382183641511009,-0.0103864770496218,0.0214543867557704,0.0144948318967821,-0.00271259341319413,-6.49603076195455e-18,0.00236831914948097,-0.0110431786069058,-0.0142480502807584,0.00600272290431041,0.019177945945209,0.00529529013018658,-0.0110843854061136,-0.00757197727014603,0.00142996480047653,3.01930538314559e-17,-0.0012649423906543,0.00592401774545065,0.00766676131480062,-0.00323614959750143,-0.0103475020786659,-0.00285653478644172,0.00597268707989487,0.0040718581417142,-0.000766782148306735,-3.6861253717419e-18,0.000672868013850299,-0.0031351266108784,-0.00403394632438874,0.00169175660610247,0.00537104583700944,0.00147133278769323,-0.00305094679552056,-0.00206162012538381,0.000384601049446937,-1.09888517356413e-17,-0.000330745133012021,0.00152462399350311,0.00194016309554047,-0.000804520510600586,-0.0025251218082832,-0.000683824061525995,0.00140193868955523,0.000936904564869336,-0.000172949707664349,-7.13567323927889e-18,0.00014603225732659,-0.000668443659431742,-0.00084639253294382,0.000350133436693066,0.00109991066878456,0.000299319348801494,-0.00061961789571496,-0.000420491799114039,7.93395299252283e-05,3.46689975517741e-18,-7.1603500225591e-05,0.000343150640596384,0.000458931107483354,-0.000202267953251596};
    

// Circular buffer for past samples
float buffer[BUFFER_SIZE] = {0};

// Function to implement FIR filtering
float fir_filter(float new_sample) {
    // Shift buffer left
    for (int i = 0; i < BUFFER_SIZE - 1; i++) {
        buffer[i] = buffer[i + 1];
    }
    buffer[BUFFER_SIZE - 1] = new_sample;

    // Compute FIR convolution
    float output = 0.0;
    for (int i = 0; i < BUFFER_SIZE; i++) {
        output += buffer[i] * h[i];
    }
    return output;
}

void setup() {
    Serial.begin(115200);
    
    // Initialize ADC (Microphone Input)
    analogReadResolution(12);  // 12-bit ADC (0-4095)
    pinMode(A0, INPUT);  // Use A0 for microphone input

    // Initialize PWM for Output (D9)
    pinMode(9, OUTPUT);
    analogWriteResolution(12); // 12-bit PWM output (0-4095)
}

void loop() {
    float processing_buffer[ANOTHER_BUFFER];

    // Read 1000 samples and store them in processing_buffer
    for (int i = 0; i < ANOTHER_BUFFER; i++) {
        int raw_adc = analogRead(A0);
        processing_buffer[i] = ((float)raw_adc / 4095.0) * 2.0 - 1.0; // Normalize to [-1,1]
        delayMicroseconds(1000000 / SAMPLE_RATE); // Maintain sampling rate
    }

    // Process 1000 stored samples one by one
    for (int i = 0; i < ANOTHER_BUFFER; i++) {
        float output_signal = fir_filter(processing_buffer[i]);

        // Convert back to PWM (0 - 4095)
        int pwm_output = (int)((output_signal + 1.0) * 2047.5);
        analogWrite(9, pwm_output);

        // Display the filtered signal in the Serial Plotter
        Serial.println(output_signal);
        delayMicroseconds(1000000 / SAMPLE_RATE);
    }
}
